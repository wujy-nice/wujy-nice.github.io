import{_ as s,o as n,c as a,S as l}from"./chunks/framework.c59ae78c.js";const g=JSON.parse('{"title":"Internationalization","description":"","frontmatter":{},"headers":[],"relativePath":"guide/i18n.md","filePath":"guide/i18n.md","lastUpdated":null}'),e={name:"guide/i18n.md"},p=l(`<h1 id="internationalization" tabindex="-1">Internationalization <a class="header-anchor" href="#internationalization" aria-label="Permalink to &quot;Internationalization&quot;">​</a></h1><p>To use the built-in i18n features, one needs to create a directory structure as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docs/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ es/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ fr/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ foo.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docs/</span></span>
<span class="line"><span style="color:#24292e;">├─ es/</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#24292e;">├─ fr/</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#24292e;">├─ foo.md</span></span></code></pre></div><p>Then in <code>docs/.vitepress/config.ts</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// shared properties and other top-level stuff...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  locales: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      label: </span><span style="color:#9ECBFF;">&#39;English&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      lang: </span><span style="color:#9ECBFF;">&#39;en&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    fr: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      label: </span><span style="color:#9ECBFF;">&#39;French&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      lang: </span><span style="color:#9ECBFF;">&#39;fr&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// optional, will be added  as \`lang\` attribute on \`html\` tag</span></span>
<span class="line"><span style="color:#E1E4E8;">      link: </span><span style="color:#9ECBFF;">&#39;/fr/guide&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// default /fr/ -- shows on navbar translations menu, can be external</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// other locale specific properties...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// shared properties and other top-level stuff...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  locales: {</span></span>
<span class="line"><span style="color:#24292E;">    root: {</span></span>
<span class="line"><span style="color:#24292E;">      label: </span><span style="color:#032F62;">&#39;English&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      lang: </span><span style="color:#032F62;">&#39;en&#39;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    fr: {</span></span>
<span class="line"><span style="color:#24292E;">      label: </span><span style="color:#032F62;">&#39;French&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      lang: </span><span style="color:#032F62;">&#39;fr&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// optional, will be added  as \`lang\` attribute on \`html\` tag</span></span>
<span class="line"><span style="color:#24292E;">      link: </span><span style="color:#032F62;">&#39;/fr/guide&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// default /fr/ -- shows on navbar translations menu, can be external</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// other locale specific properties...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>The following properties can be overridden for each locale (including root):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LocaleSpecificConfig</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ThemeConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">lang</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">dir</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">title</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">titleTemplate</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">head</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HeadConfig</span><span style="color:#E1E4E8;">[] </span><span style="color:#6A737D;">// will be merged with existing head entries, duplicate meta tags are automatically removed</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">themeConfig</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThemeConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// will be shallow merged, common stuff can be put in top-level themeConfig entry</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LocaleSpecificConfig</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ThemeConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">lang</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">dir</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">title</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">titleTemplate</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">head</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HeadConfig</span><span style="color:#24292E;">[] </span><span style="color:#6A737D;">// will be merged with existing head entries, duplicate meta tags are automatically removed</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">themeConfig</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThemeConfig</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// will be shallow merged, common stuff can be put in top-level themeConfig entry</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Refer <a href="https://github.com/vuejs/vitepress/blob/main/types/default-theme.d.ts" target="_blank" rel="noreferrer"><code>DefaultTheme.Config</code></a> interface for details on customizing the placeholder texts of the default theme. Don&#39;t override <code>themeConfig.algolia</code> or <code>themeConfig.carbonAds</code> at locale-level. Refer <a href="./../reference/default-theme-search#i18n">Algolia docs</a> for using multilingual search.</p><p><strong>Pro tip:</strong> Config file can be stored at <code>docs/.vitepress/config/index.ts</code> too. It might help you organize stuff by creating a configuration file per locale and then merge and export them from <code>index.ts</code>.</p><h2 id="separate-directory-for-each-locale" tabindex="-1">Separate directory for each locale <a class="header-anchor" href="#separate-directory-for-each-locale" aria-label="Permalink to &quot;Separate directory for each locale&quot;">​</a></h2><p>The following is a perfectly fine structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docs/</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ en/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ es/</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ fr/</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ foo.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docs/</span></span>
<span class="line"><span style="color:#24292e;">├─ en/</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#24292e;">├─ es/</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ foo.md</span></span>
<span class="line"><span style="color:#24292e;">├─ fr/</span></span>
<span class="line"><span style="color:#24292e;">   ├─ foo.md</span></span></code></pre></div><p>However, VitePress won&#39;t redirect <code>/</code> to <code>/en/</code> by default. You&#39;ll need to configure your server for that. For example, on Netlify, you can add a <code>docs/public/_redirects</code> file like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/*  /es/:splat  302  Language=es</span></span>
<span class="line"><span style="color:#e1e4e8;">/*  /fr/:splat  302  Language=fr</span></span>
<span class="line"><span style="color:#e1e4e8;">/*  /en/:splat  302</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/*  /es/:splat  302  Language=es</span></span>
<span class="line"><span style="color:#24292e;">/*  /fr/:splat  302  Language=fr</span></span>
<span class="line"><span style="color:#24292e;">/*  /en/:splat  302</span></span></code></pre></div><p><strong>Pro tip:</strong> If using the above approach, you can use <code>nf_lang</code> cookie to persist user&#39;s language choice. A very basic way to do this is register a watcher inside the <a href="./custom-theme#using-a-custom-theme">setup</a> function of custom theme:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// docs/.vitepress/theme/index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> DefaultTheme </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vitepress/theme&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">DefaultTheme,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">lang</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inBrowser) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`nf_lang=\${</span><span style="color:#E1E4E8;">lang</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}; expires=Mon, 1 Jan 2024 00:00:00 UTC; path=/\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// docs/.vitepress/theme/index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> DefaultTheme </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vitepress/theme&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">DefaultTheme,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">lang</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">watchEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inBrowser) {</span></span>
<span class="line"><span style="color:#24292E;">        document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`nf_lang=\${</span><span style="color:#24292E;">lang</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}; expires=Mon, 1 Jan 2024 00:00:00 UTC; path=/\`</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="rtl-support-experimental" tabindex="-1">RTL Support (Experimental) <a class="header-anchor" href="#rtl-support-experimental" aria-label="Permalink to &quot;RTL Support (Experimental)&quot;">​</a></h2><p>For RTL support, specify <code>dir: &#39;rtl&#39;</code> in config and use some RTLCSS PostCSS plugin like <a href="https://github.com/MohammadYounes/rtlcss" target="_blank" rel="noreferrer">https://github.com/MohammadYounes/rtlcss</a>, <a href="https://github.com/vkalinichev/postcss-rtl" target="_blank" rel="noreferrer">https://github.com/vkalinichev/postcss-rtl</a> or <a href="https://github.com/elchininet/postcss-rtlcss" target="_blank" rel="noreferrer">https://github.com/elchininet/postcss-rtlcss</a>. You&#39;ll need to configure your PostCSS plugin to use <code>:where([dir=&quot;ltr&quot;])</code> and <code>:where([dir=&quot;rtl&quot;])</code> as prefixes to prevent CSS specificity issues.</p>`,18),o=[p];function t(c,r,i,y,E,d){return n(),a("div",null,o)}const f=s(e,[["render",t]]);export{g as __pageData,f as default};
