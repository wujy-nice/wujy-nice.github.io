import{_ as s,o as a,c as n,S as e}from"./chunks/framework.c59ae78c.js";const h=JSON.parse('{"title":"Routing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/routing.md","filePath":"guide/routing.md","lastUpdated":null}'),p={name:"guide/routing.md"},l=e(`<h1 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h1><h2 id="file-based-routing" tabindex="-1">File-Based Routing <a class="header-anchor" href="#file-based-routing" aria-label="Permalink to &quot;File-Based Routing&quot;">​</a></h2><p>VitePress uses file-based routing, which means the generated HTML pages are mapped from the directory structure of the source Markdown files. For example, given the following directory structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ guide</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ getting-started.md</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ index.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ index.md</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ prologue.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├─ guide</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ getting-started.md</span></span>
<span class="line"><span style="color:#24292e;">│  └─ index.md</span></span>
<span class="line"><span style="color:#24292e;">├─ index.md</span></span>
<span class="line"><span style="color:#24292e;">└─ prologue.md</span></span></code></pre></div><p>The generated HTML pages will be:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">index.md                  --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#e1e4e8;">prologue.md               --&gt;  /prologue.html</span></span>
<span class="line"><span style="color:#e1e4e8;">guide/index.md            --&gt;  /guide/index.html (accessible as /guide/)</span></span>
<span class="line"><span style="color:#e1e4e8;">guide/getting-started.md  --&gt;  /guide/getting-started.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">index.md                  --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#24292e;">prologue.md               --&gt;  /prologue.html</span></span>
<span class="line"><span style="color:#24292e;">guide/index.md            --&gt;  /guide/index.html (accessible as /guide/)</span></span>
<span class="line"><span style="color:#24292e;">guide/getting-started.md  --&gt;  /guide/getting-started.html</span></span></code></pre></div><p>The resulting HTML can be hosted on any web server that can serve static files.</p><h2 id="root-and-source-directory" tabindex="-1">Root and Source Directory <a class="header-anchor" href="#root-and-source-directory" aria-label="Permalink to &quot;Root and Source Directory&quot;">​</a></h2><p>There are two important concepts in the file structure of a VitePress project: the <strong>project root</strong> and the <strong>source directory</strong>.</p><h3 id="project-root" tabindex="-1">Project Root <a class="header-anchor" href="#project-root" aria-label="Permalink to &quot;Project Root&quot;">​</a></h3><p>Project root is where VitePress will try to look for the <code>.vitepress</code> special directory. The <code>.vitepress</code> directory is a reserved location for VitePress&#39; config file, dev server cache, build output, and optional theme customization code.</p><p>When you run <code>vitepress dev</code> or <code>vitepress build</code> from the command line, VitePress will use the current working directory as project root. To specify a sub-directory as root, you will need to pass the relative path to the command. For example, if your VitePress project is located in <code>./docs</code>, you should run <code>vitepress dev docs</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ docs                    # project root</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ .vitepress           # config dir</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ getting-started.md</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ index.md</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├─ docs                    # project root</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ .vitepress           # config dir</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ getting-started.md</span></span>
<span class="line"><span style="color:#24292e;">│  └─ index.md</span></span>
<span class="line"><span style="color:#24292e;">└─ ...</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">vitepress</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">vitepress</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docs</span></span></code></pre></div><p>This is going to result in the following source-to-HTML mapping:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docs/index.md            --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#e1e4e8;">docs/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docs/index.md            --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#24292e;">docs/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre></div><h3 id="source-directory" tabindex="-1">Source Directory <a class="header-anchor" href="#source-directory" aria-label="Permalink to &quot;Source Directory&quot;">​</a></h3><p>Source directory is where your Markdown source files live. By default, it is the same as the project root. However, you can configure it via the <a href="./../reference/site-config#srcdir"><code>srcDir</code></a> config option.</p><p>The <code>srcDir</code> option is resolved relative to project root. For example, with <code>srcDir: &#39;src&#39;</code>, your file structure will look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.                          # project root</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ .vitepress              # config dir</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ src                     # source dir</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ getting-started.md</span></span>
<span class="line"><span style="color:#e1e4e8;">   └─ index.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.                          # project root</span></span>
<span class="line"><span style="color:#24292e;">├─ .vitepress              # config dir</span></span>
<span class="line"><span style="color:#24292e;">└─ src                     # source dir</span></span>
<span class="line"><span style="color:#24292e;">   ├─ getting-started.md</span></span>
<span class="line"><span style="color:#24292e;">   └─ index.md</span></span></code></pre></div><p>The resulting source-to-HTML mapping:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">src/index.md            --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#e1e4e8;">src/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">src/index.md            --&gt;  /index.html (accessible as /)</span></span>
<span class="line"><span style="color:#24292e;">src/getting-started.md  --&gt;  /getting-started.html</span></span></code></pre></div><h2 id="linking-between-pages" tabindex="-1">Linking Between Pages <a class="header-anchor" href="#linking-between-pages" aria-label="Permalink to &quot;Linking Between Pages&quot;">​</a></h2><p>You can use both absolute and relative paths when linking between pages. Note that although both <code>.md</code> and <code>.html</code> extensions will work, the best practice is to omit file extensions so that VitePress can generate the final URLs based on your config.</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Do --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Getting Started</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">./getting-started</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Getting Started</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">../guide/getting-started</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Don&#39;t --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Getting Started</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">./getting-started.md</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Getting Started</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">./getting-started.html</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Do --&gt;</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Getting Started</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">./getting-started</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Getting Started</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">../guide/getting-started</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Don&#39;t --&gt;</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Getting Started</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">./getting-started.md</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Getting Started</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">./getting-started.html</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Learn more about linking to assets such images in <a href="./asset-handling">Asset Handling</a>.</p><h3 id="linking-to-non-vitepress-pages" tabindex="-1">Linking to Non-VitePress Pages <a class="header-anchor" href="#linking-to-non-vitepress-pages" aria-label="Permalink to &quot;Linking to Non-VitePress Pages&quot;">​</a></h3><p>If you want to link to a page in your site that is not generated by VitePress, you&#39;ll either need to use the full URL (opens in a new tab) or explicitly specify the target:</p><p><strong>Input</strong></p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Link to pure.html</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">/pure.html</span><span style="color:#E1E4E8;">){target=&quot;_self&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Link to pure.html</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">/pure.html</span><span style="color:#24292E;">){target=&quot;_self&quot;}</span></span></code></pre></div><p><strong>Output</strong></p><p><a href="/pure.html" target="_self">Link to pure.html</a></p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In Markdown links, the <code>base</code> is automatically prepended to the URL. This means that if you want to link to a page outside of your base, you&#39;d need something like <code>../../pure.html</code> in the link (resolved relative to the current page by the browser).</p><p>Alternatively, you can directly use the anchor tag syntax:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;a href=&quot;/pure.html&quot; target=&quot;_self&quot;&gt;Link to pure.html&lt;/a&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;a href=&quot;/pure.html&quot; target=&quot;_self&quot;&gt;Link to pure.html&lt;/a&gt;</span></span></code></pre></div></div><h2 id="generating-clean-url" tabindex="-1">Generating Clean URL <a class="header-anchor" href="#generating-clean-url" aria-label="Permalink to &quot;Generating Clean URL&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Server Support Required</p><p>To serve clean URLs with VitePress, server-side support is required.</p></div><p>By default, VitePress resolves inbound links to URLs ending with <code>.html</code>. However, some users may prefer &quot;Clean URLs&quot; without the <code>.html</code> extension - for example, <code>example.com/path</code> instead of <code>example.com/path.html</code>.</p><p>Some servers or hosting platforms (for example Netlify or Vercel) provide the ability to map a URL like <code>/foo</code> to <code>/foo.html</code> if it exists, without a redirect:</p><ul><li>Netlify supports this by default.</li><li>Vercel requires enabling the <a href="https://vercel.com/docs/concepts/projects/project-configuration#cleanurls" target="_blank" rel="noreferrer"><code>cleanUrls</code> option in <code>vercel.json</code></a>.</li></ul><p>If this feature is available to you, you can then also enable VitePress&#39; own <a href="./../reference/site-config#cleanurls"><code>cleanUrls</code></a> config option so that:</p><ul><li>Inbound links between pages are generated without the <code>.html</code> extension.</li><li>If current path ends with <code>.html</code>, the router will perform a client-side redirect to the extension-less path.</li></ul><p>If, however, you cannot configure your server with such support (e.g. GitHub pages), you will have to manually resort to the following directory structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ getting-started</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ index.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ installation</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ index.md</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ index.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├─ getting-started</span></span>
<span class="line"><span style="color:#24292e;">│  └─ index.md</span></span>
<span class="line"><span style="color:#24292e;">├─ installation</span></span>
<span class="line"><span style="color:#24292e;">│  └─ index.md</span></span>
<span class="line"><span style="color:#24292e;">└─ index.md</span></span></code></pre></div><h2 id="route-rewrites" tabindex="-1">Route Rewrites <a class="header-anchor" href="#route-rewrites" aria-label="Permalink to &quot;Route Rewrites&quot;">​</a></h2><p>You can customize the mapping between the source directory structure and the generated pages. It&#39;s useful when you have a complex project structure. For example, let&#39;s say you have a monorepo with multiple packages, and would like to place documentations along with the source files like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├─ packages</span></span>
<span class="line"><span style="color:#e1e4e8;">│  ├─ pkg-a</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │  └─ src</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │      ├─ pkg-a-code.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│  │      └─ pkg-a-docs.md</span></span>
<span class="line"><span style="color:#e1e4e8;">│  └─ pkg-b</span></span>
<span class="line"><span style="color:#e1e4e8;">│     └─ src</span></span>
<span class="line"><span style="color:#e1e4e8;">│         ├─ pkg-b-code.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│         └─ pkg-b-docs.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├─ packages</span></span>
<span class="line"><span style="color:#24292e;">│  ├─ pkg-a</span></span>
<span class="line"><span style="color:#24292e;">│  │  └─ src</span></span>
<span class="line"><span style="color:#24292e;">│  │      ├─ pkg-a-code.ts</span></span>
<span class="line"><span style="color:#24292e;">│  │      └─ pkg-a-docs.md</span></span>
<span class="line"><span style="color:#24292e;">│  └─ pkg-b</span></span>
<span class="line"><span style="color:#24292e;">│     └─ src</span></span>
<span class="line"><span style="color:#24292e;">│         ├─ pkg-b-code.ts</span></span>
<span class="line"><span style="color:#24292e;">│         └─ pkg-b-docs.md</span></span></code></pre></div><p>And you want the VitePress pages to be generated like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">packages/pkg-a/src/pkg-a-docs.md  --&gt;  /pkg-a/index.html</span></span>
<span class="line"><span style="color:#e1e4e8;">packages/pkg-b/src/pkg-b-docs.md  --&gt;  /pkg-b/index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">packages/pkg-a/src/pkg-a-docs.md  --&gt;  /pkg-a/index.html</span></span>
<span class="line"><span style="color:#24292e;">packages/pkg-b/src/pkg-b-docs.md  --&gt;  /pkg-b/index.html</span></span></code></pre></div><p>You can achieve this by configuring the <a href="./../reference/site-config#rewrites"><code>rewrites</code></a> option like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .vitepress/config.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rewrites: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;packages/pkg-a/src/pkg-a-docs.md&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;pkg-a/index.md&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;packages/pkg-b/src/pkg-b-docs.md&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;pkg-b/index.md&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .vitepress/config.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rewrites: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;packages/pkg-a/src/pkg-a-docs.md&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;pkg-a/index.md&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;packages/pkg-b/src/pkg-b-docs.md&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;pkg-b/index.md&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <code>rewrites</code> option also supports dynamic route parameters. In the above example, it would be verbose to list all the paths if you have many packages. Given that they all have the same file structure, you can simplify the config like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rewrites: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;packages/:pkg/src/(.*)&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;:pkg/index.md&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  rewrites: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;packages/:pkg/src/(.*)&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;:pkg/index.md&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The rewrite paths are compiled using the <code>path-to-regexp</code> package - consult <a href="https://github.com/pillarjs/path-to-regexp#parameters" target="_blank" rel="noreferrer">its documentation</a> for more advanced syntax.</p><div class="warning custom-block"><p class="custom-block-title">Relative Links with Rewrites</p><p>When rewrites are enabled, <strong>relative links should be based on the rewritten paths</strong>. For example, in order to create a relative link from <code>packages/pkg-a/src/pkg-a-code.md</code> to <code>packages/pkg-b/src/pkg-b-code.md</code>, you should use:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#DBEDFF;text-decoration:underline;">Link to PKG B</span><span style="color:#E1E4E8;">](</span><span style="color:#E1E4E8;text-decoration:underline;">../pkg-b/pkg-b-code</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;text-decoration:underline;">Link to PKG B</span><span style="color:#24292E;">](</span><span style="color:#24292E;text-decoration:underline;">../pkg-b/pkg-b-code</span><span style="color:#24292E;">)</span></span></code></pre></div></div><h2 id="dynamic-routes" tabindex="-1">Dynamic Routes <a class="header-anchor" href="#dynamic-routes" aria-label="Permalink to &quot;Dynamic Routes&quot;">​</a></h2><p>You can generate many pages using a single Markdown file and dynamic data. For example, you can create a <code>packages/[pkg].md</code> file that generates a corresponding page for every package in a project. Here, the <code>[pkg]</code> segment is a route <strong>parameter</strong> that differentiates each page from the others.</p><h3 id="paths-loader-file" tabindex="-1">Paths Loader File <a class="header-anchor" href="#paths-loader-file" aria-label="Permalink to &quot;Paths Loader File&quot;">​</a></h3><p>Since VitePress is a static site generator, the possible page paths must be determined at build time. Therefore, a dynamic route page <strong>must</strong> be accompanied by a <strong>paths loader file</strong>. For <code>packages/[pkg].md</code>, we will need <code>packages/[pkg].paths.js</code> (<code>.ts</code> is also supported):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ packages</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ [pkg].md         # route template</span></span>
<span class="line"><span style="color:#e1e4e8;">   └─ [pkg].paths.js   # route paths loader</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">└─ packages</span></span>
<span class="line"><span style="color:#24292e;">   ├─ [pkg].md         # route template</span></span>
<span class="line"><span style="color:#24292e;">   └─ [pkg].paths.js   # route paths loader</span></span></code></pre></div><p>The paths loader should provide an object with a <code>paths</code> method as its default export. The <code>paths</code> method should return an array of objects with a <code>params</code> property. Each of these objects will generate a corresponding page.</p><p>Given the following <code>paths</code> array:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// packages/[pkg].paths.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">paths</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { params: { pkg: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> }},</span></span>
<span class="line"><span style="color:#E1E4E8;">      { params: { pkg: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// packages/[pkg].paths.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      { params: { pkg: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> }},</span></span>
<span class="line"><span style="color:#24292E;">      { params: { pkg: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The generated HTML pages will be:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ packages</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ foo.html</span></span>
<span class="line"><span style="color:#e1e4e8;">   └─ bar.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">└─ packages</span></span>
<span class="line"><span style="color:#24292e;">   ├─ foo.html</span></span>
<span class="line"><span style="color:#24292e;">   └─ bar.html</span></span></code></pre></div><h3 id="multiple-params" tabindex="-1">Multiple Params <a class="header-anchor" href="#multiple-params" aria-label="Permalink to &quot;Multiple Params&quot;">​</a></h3><p>A dynamic route can contain multiple params:</p><p><strong>File Structure</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ packages</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ [pkg]-[version].md</span></span>
<span class="line"><span style="color:#e1e4e8;">   └─ [pkg]-[version].paths.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">└─ packages</span></span>
<span class="line"><span style="color:#24292e;">   ├─ [pkg]-[version].md</span></span>
<span class="line"><span style="color:#24292e;">   └─ [pkg]-[version].paths.js</span></span></code></pre></div><p><strong>Paths Loader</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">paths</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { params: { pkg: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, version: </span><span style="color:#9ECBFF;">&#39;1.0.0&#39;</span><span style="color:#E1E4E8;"> }},</span></span>
<span class="line"><span style="color:#E1E4E8;">    { params: { pkg: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, version: </span><span style="color:#9ECBFF;">&#39;2.0.0&#39;</span><span style="color:#E1E4E8;"> }},</span></span>
<span class="line"><span style="color:#E1E4E8;">    { params: { pkg: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, version: </span><span style="color:#9ECBFF;">&#39;1.0.0&#39;</span><span style="color:#E1E4E8;"> }},</span></span>
<span class="line"><span style="color:#E1E4E8;">    { params: { pkg: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, version: </span><span style="color:#9ECBFF;">&#39;2.0.0&#39;</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { params: { pkg: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, version: </span><span style="color:#032F62;">&#39;1.0.0&#39;</span><span style="color:#24292E;"> }},</span></span>
<span class="line"><span style="color:#24292E;">    { params: { pkg: </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, version: </span><span style="color:#032F62;">&#39;2.0.0&#39;</span><span style="color:#24292E;"> }},</span></span>
<span class="line"><span style="color:#24292E;">    { params: { pkg: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, version: </span><span style="color:#032F62;">&#39;1.0.0&#39;</span><span style="color:#24292E;"> }},</span></span>
<span class="line"><span style="color:#24292E;">    { params: { pkg: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, version: </span><span style="color:#032F62;">&#39;2.0.0&#39;</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Output</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">└─ packages</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ foo-1.0.0.html</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ foo-2.0.0.html</span></span>
<span class="line"><span style="color:#e1e4e8;">   ├─ bar-1.0.0.html</span></span>
<span class="line"><span style="color:#e1e4e8;">   └─ bar-2.0.0.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">└─ packages</span></span>
<span class="line"><span style="color:#24292e;">   ├─ foo-1.0.0.html</span></span>
<span class="line"><span style="color:#24292e;">   ├─ foo-2.0.0.html</span></span>
<span class="line"><span style="color:#24292e;">   ├─ bar-1.0.0.html</span></span>
<span class="line"><span style="color:#24292e;">   └─ bar-2.0.0.html</span></span></code></pre></div><h3 id="dynamically-generating-paths" tabindex="-1">Dynamically Generating Paths <a class="header-anchor" href="#dynamically-generating-paths" aria-label="Permalink to &quot;Dynamically Generating Paths&quot;">​</a></h3><p>The paths loader module is run in Node.js and only executed during build time. You can dynamically generate the paths array using any data, either local or remote.</p><p>Generating paths from local files:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;fs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">paths</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fs</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">readdirSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;packages&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">pkg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { params: { pkg }}</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;fs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fs</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">readdirSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;packages&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pkg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { params: { pkg }}</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Generating paths from remote data:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">paths</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pkgs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://my-api.com/packages&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pkgs.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">pkg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        params: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          pkg: pkg.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">          version: pkg.version</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pkgs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://my-api.com/packages&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pkgs.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pkg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        params: {</span></span>
<span class="line"><span style="color:#24292E;">          pkg: pkg.name,</span></span>
<span class="line"><span style="color:#24292E;">          version: pkg.version</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="accessing-params-in-page" tabindex="-1">Accessing Params in Page <a class="header-anchor" href="#accessing-params-in-page" aria-label="Permalink to &quot;Accessing Params in Page&quot;">​</a></h3><p>You can use the params to pass additional data to each page. The Markdown route file can access the current page params in Vue expressions via the <code>$params</code> global property:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FFAB70;">-</span><span style="color:#E1E4E8;"> package name: {{ $params.pkg }}</span></span>
<span class="line"><span style="color:#FFAB70;">-</span><span style="color:#E1E4E8;"> version: {{ $params.version }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#E36209;">-</span><span style="color:#24292E;"> package name: {{ $params.pkg }}</span></span>
<span class="line"><span style="color:#E36209;">-</span><span style="color:#24292E;"> version: {{ $params.version }}</span></span></code></pre></div><p>You can also access the current page&#39;s params via the <a href="./../reference/runtime-api#usedata"><code>useData</code></a> runtime API. This is available in both Markdown files and Vue components:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// params is a Vue ref</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(params.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// params is a Vue ref</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">params</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useData</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(params.value)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="rendering-raw-content" tabindex="-1">Rendering Raw Content <a class="header-anchor" href="#rendering-raw-content" aria-label="Permalink to &quot;Rendering Raw Content&quot;">​</a></h3><p>Params passed to the page will be serialized in the client JavaScript payload, so you should avoid passing heavy data in params, for example raw Markdown or HTML content fetched from a remote CMS.</p><p>Instead, you can pass such content to each page using the <code>content</code> property on each path object:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">paths</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">posts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://my-cms.com/blog-posts&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> posts.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        params: { id: post.id },</span></span>
<span class="line"><span style="color:#E1E4E8;">        content: post.content </span><span style="color:#6A737D;">// raw Markdown or HTML</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">posts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://my-cms.com/blog-posts&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> posts.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">post</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        params: { id: post.id },</span></span>
<span class="line"><span style="color:#24292E;">        content: post.content </span><span style="color:#6A737D;">// raw Markdown or HTML</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Then, use the following special syntax to render the content as part of the Markdown file itself:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- @content --&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- @content --&gt;</span></span></code></pre></div>`,88),o=[l];function t(c,r,i,d,y,E){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
